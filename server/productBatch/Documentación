# Para el init watch service se implenentaron los siguientes patrones:

Template Method (parcial)

    El método registerPathsForMonitoring define 
    una estructura general que puede ser extendida,
    de esta manera se proporciona un esqueleto para
    registrar paths con variaciones posibles, aunque no hay
    una función propiamente dicha.

Principio DRY (Don't Repeat Yourself)

    Siguiendo la idea, eliminamos el código duplicado en los múltiples
    bloques try-catch que desarrollamos previamente, reducimos de esta forma 
    los errores y facilitamos el mantenimiento.

Principio Fail Fast

    Lanzamos inmediatamente excepciones cuando falla el registro de algun archivo
    detectando de esta forma los errores lo antes posible.
    
# Para el watchFile vamos a tener en cuenta la siguiente idea:
	Puede pasar que se este mirando el archivo y actualizando la base de datos, entonces
	en el medio se pueden haber realizado cambios que no se actualizaron, por lo tanto,
	vamos a tener que guardar en el watcherManager si se produjeron cambios en el medio
	y vamos a pisar las veces que sea necesario cosa de que se agreguen las actualizaciones
	finales unicamente.

	Ejemplo de uso:
	
	Cambiamos el path de hombre -> no se guarda en el Path porque no estaba siendo actualizado
	Cambiamos el path de mujer -> se guarda en el path de mujer
	Cambiamos el path de hombre -> se guarda el path de hombre 
	Cambiamos el path de mujer2 -> se guarda en el path de mujer
	Cambiamos el path de hombre2 -> se guarda el path de hombre 
	paths = (h2,m2)
	
	recorremos y quitamos h2
	
	paths = (m2)
	
	luego quitamos m2
	
	y queda vacio
	
	
	Principales mejoras implementadas:
	    Separación de responsabilidades:
	    	Métodos dedicados para diferentes tareas
	    	Lógica de negocio separada de la gestión de eventos

    Manejo de concurrencia:
    	Uso de ExecutorService para programar tareas
		Delay de 500ms usando Schedule
		Eliminación de Thread.sleep() bloqueante

    Seguridad y estabilidad:
		Try-catch general en el método principal
		Manejo seguro de iteradores
		Uso de finally para resetear keys

    Manejo mejorado de paths:
		Comparación directa de paths con equals()
        Método isRelevantFile() reutilizable

    Optimización de recursos:
		Procesamiento separado de WatchService y UpdatedPaths
		Uso de polling no bloqueante

    Manejo de errores:
		Logging detallado de errores
		Excepciones controladas individualmente

    Escalabilidad:
		Fácil añadir nuevos tipos de archivos
		Lógica de ejecución centralizada

    Mejor rendimiento:
		Eliminación de chequeos redundantes
		Procesamiento asíncrono de jobs


    
    
    
    
    
    
    