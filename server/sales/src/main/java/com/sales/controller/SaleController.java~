package com.sales.controller;

import com.sales.constants.SalesConstants;
import com.sales.dto.ResponseDTO;
import com.sales.dto.SaleDTO;
import com.sales.service.impl.ISaleService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.AllArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;



@Tag(
        name = "CRUD REST APIs for Sales in Management-System",
        description = "CRUD REST APIs in Management-System to CREATE, UPDATE, GET AND DELETE Sales and Sale details"
)
@RestController
@RequestMapping("api/public/purchase")
@AllArgsConstructor
public class SaleController {

	ISaleService iSaleService;


    @Operation(
            summary = "Get all sales made in Management-System REST API",
            description = "REST API to get all sales made in Management-System"
    )
    @ApiResponses({
            @ApiResponse(
                    responseCode = "200",
                    description = "HTTP Status OK"
            ),
            @ApiResponse(
                    responseCode = "500",
                    description = "HTTP Status Internal Server Error"
            )
    }
    )
    @GetMapping("/get_facturas")
    public ResponseEntity<List<SaleDTO>> getAllSales(){
        List<SaleDTO> allSales = iSaleService.getAllSales();
        return ResponseEntity
                .status(HttpStatus.OK)
                .body(allSales);
    };


    @Operation(
            summary = "Get Sales Between two dates REST API",
            description = "REST API to get all Sales and its details based on a first and last date"
    )
    @ApiResponses({
            @ApiResponse(
                    responseCode = "200",
                    description = "HTTP Status OK"
            ),
            @ApiResponse(
                    responseCode = "500",
                    description = "HTTP Status Internal Server Error"
            )
    }
    )
    @GetMapping("/get_facturas_between")
    public ResponseEntity<List<SaleDTO>> getSalesBetween(@RequestParam("fecha_desde") String firstDate, @RequestParam("fecha_hasta") String endDate) {
        List<SaleDTO> allSalesBetween = iSaleService.getSalesBetweenDates(firstDate, endDate);
        return ResponseEntity
                .status(HttpStatus.OK)
                .body(allSalesBetween);
    }


    @Operation(
            summary = "Create Sale REST API",
            description = "REST API to create new Sale inside Management-System"
    )
    @ApiResponses({
            @ApiResponse(
                    responseCode = "201",
                    description = "HTTP Status CREATED"
            ),
            @ApiResponse(
                    responseCode = "500",
                    description = "HTTP Status Internal Server Error"
            )
    })
    @PostMapping("/add_purchase")
    public ResponseEntity<ResponseDTO> savePurchase(@RequestBody List<SaleDTO> purchaseList){
        iSaleService.saveSales(purchaseList);

        return ResponseEntity
                .status(HttpStatus.CREATED)
                .body(new ResponseDTO(SalesConstants.MESSAGE_201, SalesConstants.STATUS_201));


    }


    @Operation(
            summary = "Get Excel file with Sales data REST API",
            description = "REST API to get Excel file with Sales data"
    )
    @ApiResponses({
            @ApiResponse(
                    responseCode = "200",
                    description = "HTTP Status OK"
            ),
            @ApiResponse(
                    responseCode = "500",
                    description = "HTTP Status Internal Server Error"
            )
    }
    )
    @GetMapping("/get_excel")
    public ResponseEntity<byte[]> getExcel(
            @RequestParam(value = "fecha_desde", required = false) String fechaDesde,
            @RequestParam(value = "fecha_hasta", required = false) String fechaHasta){
    	
    		return iSaleService.generateExcelReport(fechaDesde, fechaHasta);
    }

}
